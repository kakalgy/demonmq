package kakalgy.yusj.demonmq.command;

import javax.jms.JMSException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * @openwire:marshaller
 * 
 */
public abstract class DemonMQTempDestination extends DemonMQDestination {

    private static final Logger LOGGER = LoggerFactory.getLogger(DemonMQTempDestination.class);

    protected transient DemonMQConnection connection;
    protected transient String connectionId;
    protected transient int sequenceId;

    public DemonMQTempDestination() {
    }

    public DemonMQTempDestination(String name) {
        super(name);
    }

    public DemonMQTempDestination(String connectionId, long sequenceId) {
        super(connectionId + ":" + sequenceId);
    }

    public boolean isTemporary() {
        return true;
    }

    public void delete() throws JMSException {
        if (connection != null) {
            connection.deleteTempDestination(this);
        }
    }

    public DemonMQConnection getConnection() {
        return connection;
    }

    public void setConnection(DemonMQConnection connection) {
        this.connection = connection;
    }

    public void setPhysicalName(String physicalName) {
        super.setPhysicalName(physicalName);
        if (!isComposite()) {
            // Parse off the sequenceId off the end.
            // this can fail if the temp destination is
            // generated by another JMS system via the JMS<->JMS Bridge
            int p = this.physicalName.lastIndexOf(":");
            if (p >= 0) {
                String seqStr = this.physicalName.substring(p + 1).trim();
                if (seqStr != null && seqStr.length() > 0) {
                    try {
                        sequenceId = Integer.parseInt(seqStr);
                    } catch (NumberFormatException e) {
                        LOGGER.debug("Did not parse sequence Id from " + physicalName);
                    }
                    // The rest should be the connection id.
                    connectionId = this.physicalName.substring(0, p);
                }
            }
        }
    }

    public String getConnectionId() {
        return connectionId;
    }

    public void setConnectionId(String connectionId) {
        this.connectionId = connectionId;
    }

    public int getSequenceId() {
        return sequenceId;
    }
}
